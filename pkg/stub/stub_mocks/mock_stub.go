// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ch629/mockservice/pkg/stub (interfaces: Service)

// Package stub_mocks is a generated GoMock package.
package stub_mocks

import (
	http "net/http"
	reflect "reflect"

	stub "github.com/ch629/mockservice/pkg/stub"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddStub mocks base method.
func (m *MockService) AddStub(arg0 stub.Definition) uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStub", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// AddStub indicates an expected call of AddStub.
func (mr *MockServiceMockRecorder) AddStub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStub", reflect.TypeOf((*MockService)(nil).AddStub), arg0)
}

// Definitions mocks base method.
func (m *MockService) Definitions() []stub.Definition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Definitions")
	ret0, _ := ret[0].([]stub.Definition)
	return ret0
}

// Definitions indicates an expected call of Definitions.
func (mr *MockServiceMockRecorder) Definitions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Definitions", reflect.TypeOf((*MockService)(nil).Definitions))
}

// RemoveStub mocks base method.
func (m *MockService) RemoveStub(arg0 uuid.UUID) (*stub.Definition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStub", arg0)
	ret0, _ := ret[0].(*stub.Definition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveStub indicates an expected call of RemoveStub.
func (mr *MockServiceMockRecorder) RemoveStub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStub", reflect.TypeOf((*MockService)(nil).RemoveStub), arg0)
}

// ServeHTTP mocks base method.
func (m *MockService) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockServiceMockRecorder) ServeHTTP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockService)(nil).ServeHTTP), arg0, arg1)
}
