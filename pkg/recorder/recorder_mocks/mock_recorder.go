// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ch629/mockservice/pkg/recorder (interfaces: Service)

// Package recorder_mocks is a generated GoMock package.
package recorder_mocks

import (
	reflect "reflect"

	domain "github.com/ch629/mockservice/pkg/domain"
	recorder "github.com/ch629/mockservice/pkg/recorder"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockService) Clear() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear")
}

// Clear indicates an expected call of Clear.
func (mr *MockServiceMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockService)(nil).Clear))
}

// Record mocks base method.
func (m *MockService) Record(arg0 domain.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Record", arg0)
}

// Record indicates an expected call of Record.
func (mr *MockServiceMockRecorder) Record(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockService)(nil).Record), arg0)
}

// RecordStub mocks base method.
func (m *MockService) RecordStub(arg0 uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordStub", arg0)
}

// RecordStub indicates an expected call of RecordStub.
func (mr *MockServiceMockRecorder) RecordStub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordStub", reflect.TypeOf((*MockService)(nil).RecordStub), arg0)
}

// Requests mocks base method.
func (m *MockService) Requests() []domain.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Requests")
	ret0, _ := ret[0].([]domain.Request)
	return ret0
}

// Requests indicates an expected call of Requests.
func (mr *MockServiceMockRecorder) Requests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Requests", reflect.TypeOf((*MockService)(nil).Requests))
}

// Stubs mocks base method.
func (m *MockService) Stubs() []recorder.StubRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stubs")
	ret0, _ := ret[0].([]recorder.StubRecord)
	return ret0
}

// Stubs indicates an expected call of Stubs.
func (mr *MockServiceMockRecorder) Stubs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stubs", reflect.TypeOf((*MockService)(nil).Stubs))
}
